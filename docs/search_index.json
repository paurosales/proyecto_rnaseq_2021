[["index.html", "Proyecto RNA-seq Generalidades Proyecto: Datos de SRP11148 0.1 Pipeline", " Proyecto RNA-seq Paulina Rosales-Becerra 2021-02-28 Generalidades Este proyecto busca retomar las herramientas y conocimientos recuperados en el curso de RNA-seq 2021 impartido por Leonardo Collado-Torres para los estudiantes de la Licenciatura en Ciencias Genómicas de la UNAM. Ligas externas Información Paulina Rosales-Becerra GitHub Paulina Rosales-Becerra Repositorio del curso Notas del curso Repositorio del proyecto (source code) Proyecto: Datos de SRP11148 El proyecto que elegí fue: “Transcriptomic and genomic profiling of early-stage ovarian carcinomas associated with histotype and overall survival [RNA-seq]” (ID: SRP11148), la elección fue basada únicamente en interés por el tema y número de muestras (n=96). Abstract “Ovarian cancer is the most lethal gynecological malignancy in the western world. Despite recent efforts to characterize ovarian cancer using molecular profiling, few targeted treatment options are currently available. Here, we examined genetic variants, fusion transcripts, SNP genotyping, and gene expression patterns for early-stage (I, II) ovarian carcinomas (n=96) in relation to clinicopathological characteristics and clinical outcome, thereby identifying novel genetic features of ovarian carcinomas. Furthermore, mutation frequencies of specific genetic variants and/or their gene expression patterns were associated with histotype and overall survival, e.g. SLC28A2 (mucinous ovarian carcinoma histotype), ARCN1 (low expression in 0-2 year survival group), and tumor suppressor MTUS1 (mutation status and overall survival). The long non-coding RNA MALAT1 was identified as a highly promiscuous fusion transcript in ovarian carcinoma. Moreover, gene expression deregulation for 23 genes was associated with tumor aggressiveness. Taken together, the novel biomarkers identified here may improve ovarian carcinoma subclassification and patient stratification according to histotype and overall survival. Overall design: Whole-transcriptome RNA sequencing (RNA-seq) was performed for 96 early-stage primary invasive ovarian carcinomas.” 0.1 Pipeline A manera general el proyecto seguirá el siguiente esquema: "],["libs.html", "1 Librerías utilizadas", " 1 Librerías utilizadas library(&quot;recount3&quot;) library(&quot;ggplot2&quot;) library(&quot;edgeR&quot;) library(&quot;limma&quot;) library(&quot;RColorBrewer&quot;) library(&quot;pheatmap&quot;) "],["importacion.html", "2 Importación de datos", " 2 Importación de datos Los datos de RNA-seq son descargados a través del paquete recount3 de Bioconductor. ## library(&quot;recount3&quot;) human_projects &lt;- available_projects() rse_gene_SRP111481 &lt;- create_rse( subset( human_projects, project == &quot;SRP111481&quot; &amp; project_type == &quot;data_sources&quot; ) ) ## Convertir las cuentas por nucleotido a cuentas por lectura assay(rse_gene_SRP111481, &quot;counts&quot;) &lt;- compute_read_counts(rse_gene_SRP111481) "],["limpieza.html", "3 Limpieza y formateo de datos 3.1 Formateo", " 3 Limpieza y formateo de datos Para evitar problemas de interpretación durante el manejo de datos, es necesario verificar que la información de cada categoría permita su uso; y en caso de ser necesario, curarla. Con los siguientes outputs nos damos cuenta que el proyecto cuenta con 4 atributos: age figo stage source_name tissue head(rse_gene_SRP111481$sra.sample_attributes) ## [1] &quot;age;;39|figo stage;;II|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [2] &quot;age;;58|figo stage;;I|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [3] &quot;age;;64|figo stage;;I|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [4] &quot;age;;67|figo stage;;I|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [5] &quot;age;;61|figo stage;;II|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [6] &quot;age;;64|figo stage;;II|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; Probablemete el espacio en el atributo figo stage haga ruido, por lo tanto la modifiqué a figo_stage: rse_gene_SRP111481$sra.sample_attributes &lt;- gsub(&quot;figo stage&quot;, &quot;figo_stage&quot;, rse_gene_SRP111481$sra.sample_attributes) rse_gene_SRP111481$sra.sample_attributes[1:3] ## [1] &quot;age;;39|figo_stage;;II|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [2] &quot;age;;58|figo_stage;;I|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; ## [3] &quot;age;;64|figo_stage;;I|source_name;;Primary invasive ovarian carcinomas|tissue;;early-stage primary invasive ovarian carcinoma&quot; Además separaremos los atributos y los agregaremos al objeto para poder manejarlos. ## Separar los atributos e incluirlos al data.frame rse_gene_SRP111481 &lt;- expand_sra_attributes(rse_gene_SRP111481) colData(rse_gene_SRP111481)[ , grepl(&quot;^sra_attribute&quot;, colnames(colData(rse_gene_SRP111481))) ] ## DataFrame with 96 rows and 4 columns ## sra_attribute.age sra_attribute.figo_stage sra_attribute.source_name ## &lt;character&gt; &lt;character&gt; &lt;character&gt; ## SRR5815895 39 II Primary invasive ova.. ## SRR5815896 58 I Primary invasive ova.. ## SRR5815897 64 I Primary invasive ova.. ## SRR5815898 67 I Primary invasive ova.. ## SRR5815899 61 II Primary invasive ova.. ## ... ... ... ... ## SRR5815937 55 I Primary invasive ova.. ## SRR5815939 49 I Primary invasive ova.. ## SRR5815940 75 I Primary invasive ova.. ## SRR5815947 80 I Primary invasive ova.. ## SRR5815948 25 I Primary invasive ova.. ## sra_attribute.tissue ## &lt;character&gt; ## SRR5815895 early-stage primary .. ## SRR5815896 early-stage primary .. ## SRR5815897 early-stage primary .. ## SRR5815898 early-stage primary .. ## SRR5815899 early-stage primary .. ## ... ... ## SRR5815937 early-stage primary .. ## SRR5815939 early-stage primary .. ## SRR5815940 early-stage primary .. ## SRR5815947 early-stage primary .. ## SRR5815948 early-stage primary .. 3.1 Formateo Modificar los datos tipo caracter que requieran cambio. ## Comprobar que la variable categorica figo_stage se pueda convertir a dummy variable table(rse_gene_SRP111481$sra_attribute.figo_stage) ## ## I II ## 64 32 Formatear el tipo de dato para que sean manipulables. ## Pasar de character a nuemric o factor rse_gene_SRP111481$sra_attribute.age &lt;- as.numeric(rse_gene_SRP111481$sra_attribute.age) rse_gene_SRP111481$sra_attribute.figo_stage &lt;- factor(rse_gene_SRP111481$sra_attribute.figo_stage) ## Resumen de las variables de interés summary(as.data.frame(colData(rse_gene_SRP111481)[ , grepl(&quot;^sra_attribute.[age|figo_stage|source_name|tissue]&quot;, colnames(colData(rse_gene_SRP111481))) ])) ## sra_attribute.age sra_attribute.figo_stage sra_attribute.source_name ## Min. :25.00 I :64 Length:96 ## 1st Qu.:52.00 II:32 Class :character ## Median :63.00 Mode :character ## Mean :63.15 ## 3rd Qu.:74.25 ## Max. :86.00 ## sra_attribute.tissue ## Length:96 ## Class :character ## Mode :character ## ## ## "],["transformacion.html", "4 Transformación de datos 4.1 Crear una nueva variable categórica 4.2 Filtrado", " 4 Transformación de datos Una vez que los datos son legibles y manejables, podemos manipularlos de acuerdo al objetivo. 4.1 Crear una nueva variable categórica Crear la categoría adult para dividir en dos rangos de edad: young - menor a 60 años old - mayor o igual a 60 años rse_gene_SRP111481$adult &lt;- factor(ifelse(rse_gene_SRP111481$sra_attribute.age &lt; 60, &quot;young&quot;, &quot;old&quot;)) table(rse_gene_SRP111481$adult) ## ## old young ## 60 36 4.2 Filtrado Muchos de los datos pueden contener información desviada que haga ruido en nuestro análisis, por lo tanto es necesario eliminarla. Para la filtración utilizaremos dos parámetros: Por calidad de la librería: de acuerdo a la proporción de lecturas asignadas a genes/lecturas totales. Por niveles de expresión: de acuerdo a niveles promedio de expresión de los datos y valores como el cpm (counts per million). 4.2.1 Calidad de la librería Calculamos la proporción de genes asignados, donde valores cercanos a 1 indican mayor asignación de lecturas a genes. Dando a entender que la calidad de la librería es buena. ## Calcular la proporcion de genes para saber la calidad rse_gene_SRP111481$assigned_gene_prop &lt;- rse_gene_SRP111481$recount_qc.gene_fc_count_all.assigned / rse_gene_SRP111481$recount_qc.gene_fc_count_all.total summary(rse_gene_SRP111481$assigned_gene_prop) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1511 0.3725 0.4240 0.4166 0.4616 0.6476 Podemos ver que tenemos proporciones desde 0.1511 hasta 0.6476. ## Salvar el objeto entero en caso de necesitar regresar a la version original rse_gene_SRP111481_unfiltered &lt;- rse_gene_SRP111481 Además, analizando los cuartiles de cada rango en distintas variables, notamos que el primer cuartil de todas es ~0.3 por lo que podemos tomarlo como punto de corte. ## Comparar proporciones de cada grupo ## Por rango de edad with(colData(rse_gene_SRP111481), tapply(assigned_gene_prop, adult, summary)) ## $old ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.2036 0.3725 0.4231 0.4153 0.4661 0.5604 ## ## $young ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1511 0.3764 0.4240 0.4186 0.4559 0.6476 ## Por etapa FIGO with(colData(rse_gene_SRP111481), tapply(assigned_gene_prop, sra_attribute.figo_stage, summary)) ## $I ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.2290 0.3708 0.4131 0.4164 0.4552 0.6476 ## ## $II ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1511 0.3795 0.4423 0.4169 0.4666 0.5604 Visualizando todas las proporciones nos damos cuenta de que la frecuencia de las proporciones menores son pocas, por lo tanto podemos eliminarlas. Al ser un análisis de calidad, evité eliminar datos cercanos a uno aunque se alejaran de la distrbución. ## library(&quot;ggplot2&quot;) plot_df &lt;- as.data.frame(colData(rse_gene_SRP111481)[, &quot;assigned_gene_prop&quot;]) colnames(plot_df) &lt;- &quot;Calidad&quot; qplot(plot_df$Calidad, geom = &quot;histogram&quot;, col = I(&quot;white&quot;), xlab = &quot;Proporción lecturas asignadas/totales&quot;, ylab = &quot;Frecuencia&quot;, main = &quot;Unfiltered Data&quot;) Verificar cuántas variables se pierden. ## Estimación de punto de corte table(rse_gene_SRP111481$assigned_gene_prop &lt; 0.3) ## ## FALSE TRUE ## 88 8 ## Eliminar aquellas muestras con proporciones bajas rse_gene_SRP111481 &lt;- rse_gene_SRP111481[, rse_gene_SRP111481$assigned_gene_prop &gt; 0.3] 4.2.2 Niveles de expresión Necesitamos crear un objeto DGEList (Differential Gene Expression List) a partir de las lecturas. Con él podremos manipular e interpretar los niveles de expresión, y así, podemos eliminar datos ruidosos. Es necesario que la normalizacion de datos se lleve a acabo desde este punto para evitar que las diferencias por normalización sean filtradas. ## library(&quot;edgeR&quot;) dge &lt;- DGEList( counts = assay(rse_gene_SRP111481, &quot;counts&quot;), genes = rowData(rse_gene_SRP111481) ) ## Calcular factores para normalización dge_unnorm &lt;- dge dge &lt;- calcNormFactors(dge) Utilizamos valores como el cpm para la filtración posterior. ## Convertir las cuentas a cmp con edgeR cpm &lt;- cpm(dge) lcpm &lt;- cpm(dge, log=TRUE) ## Tamaño de libreria aprox L &lt;- mean(dge$samples$lib.size) * 1e-6 M &lt;- median(dge$samples$lib.size) * 1e-6 c(L, M) ## [1] 8.417463 8.261144 En nuestro dataset contamos con 373 genes (0.5% de los genes totales) que no se expresan, por lo tanto no son significativos para nuestro análisis y podemos eliminarlos. table(rowSums(dge$counts==0)==9) ## ## FALSE TRUE ## 63483 373 Además determinarémos cuáles genes cuentan con un nivel de expresión significativo con la función filterByExpr. # Salvar dge en caso de neceesitar el original dge_unfiltered &lt;- dge keep.exprs &lt;- filterByExpr(dge) dge &lt;- dge[keep.exprs,, keep.lib.sizes=FALSE] dim(dge) ## [1] 14984 88 Cálculo del punto de corte a partir del cpm. lcpm.cutoff &lt;- log2(10/M + 2/L) samplenames &lt;- substring(colnames(dge), 12, nchar(colnames(dge))) ## library(&quot;RColorBrewer&quot;) nsamples &lt;- ncol(dge) col &lt;- brewer.pal(nsamples, &quot;Paired&quot;) par(mfrow=c(1,2)) plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main=&quot;&quot;, xlab=&quot;&quot;) title(main=&quot;A. Raw data&quot;, xlab=&quot;Log-cpm&quot;) abline(v=lcpm.cutoff, lty=3) for (i in 2:nsamples){ den &lt;- density(lcpm[,i]) lines(den$x, den$y, col=col[i], lwd=2) } legend(&quot;topright&quot;, samplenames, text.col=col, bty=&quot;n&quot;) lcpm &lt;- cpm(dge, log=TRUE) plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main=&quot;&quot;, xlab=&quot;&quot;) title(main=&quot;B. Filtered data&quot;, xlab=&quot;Log-cpm&quot;) abline(v=lcpm.cutoff, lty=3) for (i in 2:nsamples){ den &lt;- density(lcpm[,i]) lines(den$x, den$y, col=col[i], lwd=2) } legend(&quot;topright&quot;, samplenames, text.col=col, bty=&quot;n&quot;) ## Niveles medios de expresión gene_means &lt;- rowMeans(assay(rse_gene_SRP111481, &quot;counts&quot;)) summary(gene_means) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.0 0.0 1.2 131.8 22.0 1966090.7 ## Eliminar genes no significativos rse_gene_SRP111481 &lt;- rse_gene_SRP111481[gene_means &gt; 0.1, ] ## Dimensiones finales dim(rse_gene_SRP111481) ## [1] 45206 88 Recordemos que las dimensiones originales eran de 63856 genes y 96 muestras, por lo tanto eliminamos un total de 45206 genes y 8 muestras. Manteniendo el 70.79% de los genes originales. ## Porcentaje de genes que retuvimos round(nrow(rse_gene_SRP111481) / nrow(rse_gene_SRP111481_unfiltered) * 100, 2) ## [1] 70.79 "],["normalizacion.html", "5 Normalización", " 5 Normalización La normalización se llevó a cabo desde el filtrado por niveles de expresión. En este apartado mostraré un ejemplo de los efectos de dicha normalización utilizando únicamnete las primeras 10 muestras del objeto dge. dge_unnorm &lt;- dge[,1:10] dge_unnorm$samples$norm.factors &lt;- 1 dge_unnorm$counts[,1] &lt;- ceiling(dge_unnorm$counts[,1]*0.05) dge_unnorm$counts[,2] &lt;- dge_unnorm$counts[,2]*5 par(mfrow=c(1,2)) lcpm &lt;- cpm(dge_unnorm, log=TRUE) boxplot(lcpm, las=2, col=col, main=&quot;&quot;) title(main=&quot;A. Unnormalized data&quot;,ylab=&quot;Log-cpm&quot;) dge_norm &lt;- calcNormFactors(dge_unnorm) lcpm &lt;- cpm(dge_norm, log=TRUE) boxplot(lcpm, las=2, col=col, main=&quot;&quot;) title(main=&quot;B. Normalized data&quot;,ylab=&quot;Log-cpm&quot;) "],["visualizacion.html", "6 Visualización", " 6 Visualización En este punto es necesario visualizar los datos que componen el proyecto para que la parte de modelaje tenga más sentido y las relaciones analizadas sean las adecuadas. Al tratarse de un estudio de carcinomas tempranos en ovarios, la cantidad de categorías que componen el proyecto son pocas ya que no hay variación en tejido y sexo. Por esta razón las condiciones estudiadas prácticamente se reducen a dos: Edad Etapa FIGO Recordemos que previamente en la transformación de datos, creamos la categría indicativa adult de acuerdo a rangos de edad. En esta primer gráfica podemos ver la proporción de genes asignados de acuerdo a a edad y la Etapa FIGO. A manera general podemos decir que no existe un patrón evidente que relacione algunas de las variables directamente, lo que posiblemente indique que son independientes entre sí. plot_df &lt;- as.data.frame(colData(rse_gene_SRP111481)) ggplot(as.data.frame(colData(rse_gene_SRP111481)), aes(y = assigned_gene_prop, x = sra_attribute.figo_stage)) + geom_point(aes(col = adult, size = sra_attribute.age))+ theme_bw(base_size = 20) + ylab(&quot;Assigned Gene Prop&quot;) + xlab(&quot;FIGO Stage&quot;) En la siguiente gráfica tratamos de visualizar la relación entre la edad y la Etapa FIGO. Donde la Etapa FIGO I muestra un rango de edad más corto, con una ligera tendencia a edades mayores (basándonos en la longitud de los bigotes). Sin embargo puede ser que dicha tendencia no sea significativa. ggplot(plot_df, aes(y = sra_attribute.age, x = sra_attribute.figo_stage)) + geom_boxplot(varwidth=T, fill= col[4:5]) + labs(title=&quot;Variables relation&quot;, x=&quot;FIGO Stage&quot;, y=&quot;Age&quot;) "],["modelaje.html", "7 Modelaje", " 7 Modelaje Utilizamos model.matrix() para modelar las distintas categorías de nuestro dataset, este modelaje nos ayudará a en análisis de expresión diferencial. mod &lt;- model.matrix(~ sra_attribute.age + adult + sra_attribute.figo_stage + assigned_gene_prop, data = colData(rse_gene_SRP111481) ) colnames(mod) ## [1] &quot;(Intercept)&quot; &quot;sra_attribute.age&quot; ## [3] &quot;adultyoung&quot; &quot;sra_attribute.figo_stageII&quot; ## [5] &quot;assigned_gene_prop&quot; Antes del ajuste de datos necesitamos saber qué tan desviados están, así el ajuste será el adecuado. ## library(&quot;limma&quot;) vGene &lt;- voom(dge, mod, plot = TRUE) Ajuste de datos y evaluación respecto a la categoría figo_stage (coef = 4). ## Ajuste de datos eb_results &lt;- eBayes(lmFit(vGene)) ## Rank de datos de_results &lt;- topTable( eb_results, coef = 4, number = nrow(rse_gene_SRP111481), sort.by = &quot;none&quot; ) dim(de_results) ## [1] 14984 16 En la siguiente gráfica MA no vemos diferencias significativas de expresión en las dos etapas FIGO: I (valores positivos) y II (valores negativos). Además de que no hay una formación de conos fuerte, probablemente esto se deba a la limpieza de genes con bajos niveles de expresión. ## Visualicemos los resultados estadísticos plotMA(eb_results, coef = 4, main = &quot;FIGO Stage II&quot;) En el volcano plot los 5 genes con mayor expresión en la Etapa FIGO II (resaltados en morado), están muy distanciados de la mayoría de los genes. De manera que la expresión diferencial es clara visualmente. volcanoplot(eb_results, coef = 4, highlight = 5, names = de_results$gene_name, col=&quot;grey&quot;, hl.col = col[10]) En el visualización con el heatmap combinamos las tres categorías utilizadas a lo largo del proyecto (edad, rango de edad, Etapa FIGO). Destacan tres patrones de esta visulización: La formación de un clúster compuesto casi en su totalidad por muestras en Etapa FIGO I. Nivel promedio de expresión intermedio. Es decir, no hay muchos genes con expresiones extremas tanto altas como bajas. Los pocos casos con expresión diferencial (cuadros rojos), pertenecen a la Etapa FIGO II. Los últimos dos patrones son consistentes con los resultados expuestos en el volcano plot del punto anterior. De igual manera es importante destacar que aparentemente no existe una relación estrecha entre expresión diferencial y edad. ## Extraer valores de los genes de interés exprs_heatmap &lt;- vGene$E[rank(de_results$adj.P.Val) &lt;= 50, ] ## Creemos una tabla con información de las muestras ## y con nombres de columnas más amigables df &lt;- as.data.frame(colData(rse_gene_SRP111481)[, c(&quot;sra_attribute.age&quot;, &quot;adult&quot;, &quot;sra_attribute.figo_stage&quot;)]) colnames(df) &lt;- c(&quot;Age&quot;, &quot;AgeGroup&quot;, &quot;FIGO_Stage&quot;) ## Hagamos un heatmap library(&quot;pheatmap&quot;) # Obtener los nombres a partir de los IDs en el arreglo general namesIndex &lt;- match(rownames(exprs_heatmap), de_results$gene_id) geneNames &lt;- de_results$gene_name[namesIndex] # Modificar los nombres del heatmap row.names(exprs_heatmap) &lt;- geneNames pheatmap( exprs_heatmap, cluster_rows = TRUE, cluster_cols = TRUE, show_rownames = TRUE, show_colnames = FALSE, annotation_col = df, fontsize_row = 4 ) "],["conclusiones.html", "8 Conclusiones", " 8 Conclusiones A lo largo del proyecto se manipularon datos crudos desde la obtención, limpieza, transformación, visualización y modelaje; a través de cada una de las etapas se buscó mejorar la calidad de la información generada a partir de la manipulación de los mismos datos. Considero que cada etapa del proceso de análisis de datos de expresión diferencial es importante, la sucesión de estas etapas resulta en la obtención de información puntual de un océano de datos. Uno de los retos que enfrenté durante el análisis fue la transformación de los datos, particularmente porque los datos crudos no contaban con muchas categorías que me permitieran “jugar” con la información. Sin embargo, me pareció importante destacar que incluso con pocas características hay algo importante que rescatar. Dicho resultado se vió en la diferenciación definida de genes en la Etapa FIGO II. Muy probablemente estos genes se vean involucrados en procesos de emancipación a lo largo del tejido. En cuestiones de código, las bibliotecas de análisis de expresión diferencial utilizadas me parecieron muy amigables debido a la facilidad de búsqueda de información y contenido. Las funciones son claras y vienen bien documentadas. Particularmente me impresionó la capacidad de limma, pensé que al se un paquete no tan reciente tendría muchas limitantes de compatibilidad de objetos y manipulación de funciones. Sin embargo, el único detalle que encontré fue que la construcción de gráficas no es muy libre en cuanto a formato (colores, divisiones, etc.). Este fue el primer acercamiento que tuve a manejo de datos de expresión diferencial, estoy segura de que queda mucho por pulir y aprender, sin embargo estoy muy contenta con el resultado de este proyecto y las habilidades que me permitió desarrollar. Seguiré estudiando y trabajando en el tema, las aplicaciones son impresionantes y me gustaría seguir aprendiendo de lo mucho que pueda lograr a partir de la manipulación de datos de expresión. This book was last updated at 2021-02-28 22:57:53. "],["referencias.html", "9 Referencias", " 9 Referencias De los paquetes utilizados Robinson MD, McCarthy DJ and Smyth GK (2010). edgeR: a Bioconductor package for differential expression analysis of digital gene expression data. Bioinformatics 26, 139-140 Collado-Torres L (2021). Explore and download data from the recount3 project. doi: 10.18129/B9.bioc.recount3 (URL: https://doi.org/10.18129/B9.bioc.recount3), https://github.com/LieberInstitute/recount3 - R package version 1.0.7, &lt;URL: http://www.bioconductor.org/packages/recount3&gt;. Ritchie, M.E., Phipson, B., Wu, D., Hu, Y., Law, C.W., Shi, W., and Smyth, G.K. (2015). limma powers differential expression analyses for RNA-sequencing and microarray studies. Nucleic Acids Research 43(7), e47. Erich Neuwirth (2014). RColorBrewer: ColorBrewer Palettes. R package version 1.1-2. https://CRAN.R-project.org/package=RColorBrewer Raivo Kolde (2019). pheatmap: Pretty Heatmaps. R package version 1.0.12. https://CRAN.R-project.org/package=pheatmap H. Wickham. ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York, 2016. "]]
